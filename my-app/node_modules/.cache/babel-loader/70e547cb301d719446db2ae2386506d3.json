{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { getUserMessage, sendNewMessage } from \"./MessageApi\";\nconst initialState = {\n  status: 'idle',\n  messages: []\n};\nconst messageSlice = createSlice({\n  name: 'message',\n  initialState,\n  reducers: {\n    newMessageReceived: (state, action) => {\n      state.messages.push(action.payload);\n    }\n  },\n  extraReducers: {\n    [getUserMessage.pending]: (state, action) => {\n      state.status = 'loading';\n    },\n    [getUserMessage.fulfilled]: (state, action) => {\n      state.messages = action.payload.messages;\n      state.status = 'fulfilled';\n    },\n    [getUserMessage.rejected]: (state, action) => {\n      state.status = 'error';\n    },\n    [sendNewMessage.pending]: (state, action) => {\n      state.status = 'loading';\n    },\n    [sendNewMessage.fulfilled]: (state, action) => {\n      state.status = 'fulfilled';\n      state.messages.push(action.payload.message);\n    },\n    [sendNewMessage.rejected]: (state, action) => {\n      state.status = 'error';\n    }\n  }\n});\nexport const {\n  newMessageReceived\n} = messageSlice.actions;\nexport default messageSlice.reducer;","map":{"version":3,"sources":["/Users/light/Documents/Mukul/Mukul Web Neog/mediaCode/media/my-app/src/features/Message/MessageSlice.js"],"names":["createSlice","getUserMessage","sendNewMessage","initialState","status","messages","messageSlice","name","reducers","newMessageReceived","state","action","push","payload","extraReducers","pending","fulfilled","rejected","message","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,cAAT,EAA0BC,cAA1B,QAAiD,cAAjD;AAEA,MAAMC,YAAY,GAAE;AAEhBC,EAAAA,MAAM,EAAC,MAFS;AAGhBC,EAAAA,QAAQ,EAAC;AAHO,CAApB;AAOA,MAAMC,YAAY,GAAGN,WAAW,CAAC;AAC7BO,EAAAA,IAAI,EAAC,SADwB;AAE7BJ,EAAAA,YAF6B;AAG7BK,EAAAA,QAAQ,EAAC;AAELC,IAAAA,kBAAkB,EAAE,CAACC,KAAD,EAASC,MAAT,KAAkB;AAClCD,MAAAA,KAAK,CAACL,QAAN,CAAeO,IAAf,CAAoBD,MAAM,CAACE,OAA3B;AACH;AAJI,GAHoB;AAS7BC,EAAAA,aAAa,EAAC;AAEV,KAACb,cAAc,CAACc,OAAhB,GAA2B,CAACL,KAAD,EAAQC,MAAR,KAAiB;AACxCD,MAAAA,KAAK,CAACN,MAAN,GAAe,SAAf;AACH,KAJS;AAKV,KAACH,cAAc,CAACe,SAAhB,GAA4B,CAACN,KAAD,EAAOC,MAAP,KAAgB;AACxCD,MAAAA,KAAK,CAACL,QAAN,GAAiBM,MAAM,CAACE,OAAP,CAAeR,QAAhC;AACAK,MAAAA,KAAK,CAACN,MAAN,GAAe,WAAf;AAEH,KATS;AAUV,KAACH,cAAc,CAACgB,QAAhB,GAA0B,CAACP,KAAD,EAAOC,MAAP,KAAgB;AACtCD,MAAAA,KAAK,CAACN,MAAN,GAAe,OAAf;AACH,KAZS;AAcV,KAACF,cAAc,CAACa,OAAhB,GAA2B,CAACL,KAAD,EAAQC,MAAR,KAAiB;AACxCD,MAAAA,KAAK,CAACN,MAAN,GAAe,SAAf;AACH,KAhBS;AAiBV,KAACF,cAAc,CAACc,SAAhB,GAA4B,CAACN,KAAD,EAAOC,MAAP,KAAgB;AACxCD,MAAAA,KAAK,CAACN,MAAN,GAAe,WAAf;AACAM,MAAAA,KAAK,CAACL,QAAN,CAAeO,IAAf,CAAoBD,MAAM,CAACE,OAAP,CAAeK,OAAnC;AAEH,KArBS;AAsBV,KAAChB,cAAc,CAACe,QAAhB,GAA0B,CAACP,KAAD,EAAOC,MAAP,KAAgB;AACtCD,MAAAA,KAAK,CAACN,MAAN,GAAe,OAAf;AACH;AAxBS;AATe,CAAD,CAAhC;AAoCA,OAAO,MAAM;AAAEK,EAAAA;AAAF,IAAyBH,YAAY,CAACa,OAA5C;AACP,eAAeb,YAAY,CAACc,OAA5B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getUserMessage , sendNewMessage  } from \"./MessageApi\";\r\n\r\nconst initialState ={\r\n\r\n    status:'idle',\r\n    messages:[],\r\n    \r\n}\r\n\r\nconst messageSlice = createSlice({\r\n    name:'message',\r\n    initialState,\r\n    reducers:{\r\n        \r\n        newMessageReceived: (state , action)=>{\r\n            state.messages.push(action.payload)\r\n        }\r\n    },\r\n    extraReducers:{\r\n\r\n        [getUserMessage.pending ] :(state ,action)=>{\r\n            state.status = 'loading'\r\n        },\r\n        [getUserMessage.fulfilled]: (state,action)=>{\r\n            state.messages = action.payload.messages;\r\n            state.status = 'fulfilled';\r\n\r\n        },\r\n        [getUserMessage.rejected]:(state,action)=>{\r\n            state.status = 'error'\r\n        },\r\n\r\n        [sendNewMessage.pending ] :(state ,action)=>{\r\n            state.status = 'loading'\r\n        },\r\n        [sendNewMessage.fulfilled]: (state,action)=>{\r\n            state.status = 'fulfilled';\r\n            state.messages.push(action.payload.message); \r\n\r\n        },\r\n        [sendNewMessage.rejected]:(state,action)=>{\r\n            state.status = 'error'\r\n        },\r\n    }\r\n})\r\nexport const { newMessageReceived } = messageSlice.actions\r\nexport default messageSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}