{"ast":null,"code":"import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nexport const createNewPost = createAsyncThunk(\"posts/createNewPost\", async newPostData => {\n  const {\n    userID,\n    token,\n    imageUrl,\n    caption\n  } = newPostData;\n  const postData = {\n    caption: caption,\n    imageUrl: imageUrl\n  };\n  const headers = {\n    authorization: token\n  };\n  const url = `https://media.mukulsaini02.repl.co/v1/${userID}/posts`;\n  const postResponse = await axios.post(url, {\n    postData\n  }, {\n    headers\n  });\n  return postResponse.data;\n});\nexport const getTimelinePosts = createAsyncThunk(\"posts/getTimelinePosts\", async postPermission => {\n  const {\n    userID,\n    token\n  } = postPermission;\n  const url = `https://media.imukulsaini.repl.co/v1/${userID}/timeline`;\n  const headers = {\n    authorization: token\n  };\n  const postResponse = await axios.get(url, {\n    headers\n  });\n  return postResponse.data;\n});\nexport const getUserPosts = createAsyncThunk(\"posts/getUserPosts\", async postPermission => {\n  const {\n    userID,\n    token\n  } = postPermission;\n  const headers = {\n    authorization: token\n  };\n  console.log(userID, token);\n  const url = `https://media.imukulsaini.repl.co/v1/${userID}/posts/`;\n  const postResponse = await axios.get(url, {\n    headers\n  });\n  return postResponse.data.posts;\n});\nexport const getPostByID = createAsyncThunk(\"posts/getPostByID\", async postPermission => {\n  const {\n    token,\n    postID\n  } = postPermission;\n  const headers = {\n    authorization: token\n  };\n  const url = `https://media.imukulsaini.repl.co/v1/posts/${postID}`;\n  const postResponse = await axios.get(url, {\n    headers\n  });\n  console.log(postResponse, 'postIDvala');\n  return postResponse.data.posts;\n});","map":{"version":3,"sources":["/Users/light/Documents/Mukul/Mukul Web Neog/mediaCode/media/my-app/src/features/post/PostAPI.js"],"names":["createAsyncThunk","axios","createNewPost","newPostData","userID","token","imageUrl","caption","postData","headers","authorization","url","postResponse","post","data","getTimelinePosts","postPermission","get","getUserPosts","console","log","posts","getPostByID","postID"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,kBAAjC;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,aAAa,GAAGF,gBAAgB,CAE3C,qBAF2C,EAG3C,MAAOG,WAAP,IAAuB;AAErB,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA,QAAjB;AAA2BC,IAAAA;AAA3B,MAAuCJ,WAA7C;AACA,QAAMK,QAAQ,GAAG;AAAED,IAAAA,OAAO,EAAEA,OAAX;AAAoBD,IAAAA,QAAQ,EAAEA;AAA9B,GAAjB;AAEA,QAAMG,OAAO,GAAG;AACdC,IAAAA,aAAa,EAAEL;AADD,GAAhB;AAIA,QAAMM,GAAG,GAAI,yCAAwCP,MAAO,QAA5D;AACA,QAAMQ,YAAY,GAAG,MAAMX,KAAK,CAACY,IAAN,CAAWF,GAAX,EAAgB;AAAEH,IAAAA;AAAF,GAAhB,EAA8B;AAAEC,IAAAA;AAAF,GAA9B,CAA3B;AAEA,SAAOG,YAAY,CAACE,IAApB;AACD,CAhB0C,CAAtC;AAqBP,OAAO,MAAMC,gBAAgB,GAAGf,gBAAgB,CAAC,wBAAD,EAA4B,MAAOgB,cAAP,IAAwB;AAClG,QAAM;AAAEZ,IAAAA,MAAF;AAAYC,IAAAA;AAAZ,MAAuBW,cAA7B;AACA,QAAML,GAAG,GAAI,wCAAuCP,MAAO,WAA3D;AAEA,QAAMK,OAAO,GAAG;AACdC,IAAAA,aAAa,EAAEL;AADD,GAAhB;AAGA,QAAMO,YAAY,GAAG,MAAMX,KAAK,CAACgB,GAAN,CAAUN,GAAV,EAAc;AAAEF,IAAAA;AAAF,GAAd,CAA3B;AACA,SAAOG,YAAY,CAACE,IAApB;AACD,CAT+C,CAAzC;AAaP,OAAO,MAAMI,YAAY,GAAGlB,gBAAgB,CAC1C,oBAD0C,EAE1C,MAAOgB,cAAP,IAA0B;AACxB,QAAM;AAAEZ,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAoBW,cAA1B;AACA,QAAMP,OAAO,GAAG;AACdC,IAAAA,aAAa,EAAEL;AADD,GAAhB;AAGAc,EAAAA,OAAO,CAACC,GAAR,CAAYhB,MAAZ,EAAoBC,KAApB;AACA,QAAMM,GAAG,GAAI,wCAAuCP,MAAO,SAA3D;AACA,QAAMQ,YAAY,GAAG,MAAMX,KAAK,CAACgB,GAAN,CAAUN,GAAV,EAAe;AAAEF,IAAAA;AAAF,GAAf,CAA3B;AACA,SAAOG,YAAY,CAACE,IAAb,CAAkBO,KAAzB;AACD,CAXyC,CAArC;AAcP,OAAO,MAAMC,WAAW,GAAGtB,gBAAgB,CACzC,mBADyC,EAEzC,MAAOgB,cAAP,IAA0B;AACxB,QAAM;AAACX,IAAAA,KAAD;AAAOkB,IAAAA;AAAP,MAAkBP,cAAxB;AACA,QAAMP,OAAO,GAAG;AACdC,IAAAA,aAAa,EAAEL;AADD,GAAhB;AAGA,QAAMM,GAAG,GAAI,8CAA6CY,MAAO,EAAjE;AACA,QAAMX,YAAY,GAAG,MAAMX,KAAK,CAACgB,GAAN,CAAUN,GAAV,EAAe;AAAEF,IAAAA;AAAF,GAAf,CAA3B;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAYR,YAAZ,EAAyB,YAAzB;AACA,SAAOA,YAAY,CAACE,IAAb,CAAkBO,KAAzB;AACD,CAXwC,CAApC","sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nimport axios from \"axios\";\r\n\r\nexport const createNewPost = createAsyncThunk(\r\n  \r\n  \"posts/createNewPost\",\r\n  async (newPostData) => {\r\n\r\n    const { userID, token, imageUrl, caption } = newPostData;\r\n    const postData = { caption: caption, imageUrl: imageUrl };\r\n\r\n    const headers = {\r\n      authorization: token,\r\n    };\r\n\r\n    const url = `https://media.mukulsaini02.repl.co/v1/${userID}/posts`;\r\n    const postResponse = await axios.post(url, { postData }, { headers } );\r\n\r\n    return postResponse.data;\r\n  }\r\n);\r\n\r\n\r\n\r\nexport const getTimelinePosts = createAsyncThunk(\"posts/getTimelinePosts\" , async (postPermission)=>{\r\n  const { userID ,  token  } = postPermission;\r\n  const url = `https://media.imukulsaini.repl.co/v1/${userID}/timeline`;\r\n\r\n  const headers = {\r\n    authorization: token,\r\n  };\r\n  const postResponse = await axios.get(url,{ headers })\r\n  return postResponse.data;\r\n})\r\n\r\n\r\n\r\nexport const getUserPosts = createAsyncThunk(\r\n  \"posts/getUserPosts\",\r\n  async (postPermission) => {\r\n    const { userID, token } = postPermission;\r\n    const headers = {\r\n      authorization: token,\r\n    };\r\n    console.log(userID, token);\r\n    const url = `https://media.imukulsaini.repl.co/v1/${userID}/posts/`;\r\n    const postResponse = await axios.get(url, { headers });\r\n    return postResponse.data.posts;\r\n  }\r\n);\r\n\r\nexport const getPostByID = createAsyncThunk(\r\n  \"posts/getPostByID\",\r\n  async (postPermission) => {\r\n    const {token,postID } = postPermission;\r\n    const headers = {\r\n      authorization: token,\r\n    };\r\n    const url = `https://media.imukulsaini.repl.co/v1/posts/${postID}`;\r\n    const postResponse = await axios.get(url, { headers });\r\n    console.log(postResponse,'postIDvala')\r\n    return postResponse.data.posts;\r\n  }\r\n);\r\n\r\n"]},"metadata":{},"sourceType":"module"}