{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { createNewComment, getPostComments } from './PostCommentsApi';\nconst initialState = {\n  comments: [],\n  status: 'idle'\n};\nexport const commentSlice = createSlice({\n  name: 'postComment',\n  initialState,\n  reducers: {\n    newCommentIsAdded: (state, action) => {\n      state.comments.push(action.payload);\n    }\n  },\n  extraReducers: {\n    [createNewComment.pending]: (state, action) => {\n      state.status = 'loading';\n    },\n    [createNewComment.fulfilled]: (state, action) => {\n      // state.comments = action.payload.comments\n      state.status = 'fulfilled';\n    },\n    [createNewComment.rejected]: (state, action) => {\n      state.status = 'error';\n    },\n    [getPostComments.pending]: (state, action) => {\n      state.status = 'loading';\n    },\n    [getPostComments.fulfilled]: (state, action) => {\n      state.status = 'fulfilled';\n      state.comments = action.payload.comments;\n    },\n    [getPostComments.rejected]: (state, action) => {\n      state.status = 'error';\n    }\n  }\n});\nexport const {\n  newCommentIsAdded\n} = commentSlice.actions;\nexport default commentSlice.reducer;","map":{"version":3,"sources":["/Users/light/Documents/Mukul/Mukul Web Neog/mediaCode/media/my-app/src/features/post/PostCommentsSlice.js"],"names":["createSlice","createAsyncThunk","createNewComment","getPostComments","initialState","comments","status","commentSlice","name","reducers","newCommentIsAdded","state","action","push","payload","extraReducers","pending","fulfilled","rejected","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAuBC,gBAAvB,QAA+C,kBAA/C;AACA,SAASC,gBAAT,EAA2BC,eAA3B,QAAiD,mBAAjD;AAGA,MAAMC,YAAY,GAAG;AAErBC,EAAAA,QAAQ,EAAC,EAFY;AAGrBC,EAAAA,MAAM,EAAC;AAHc,CAArB;AAQA,OAAO,MAAMC,YAAY,GAAGP,WAAW,CAAC;AACpCQ,EAAAA,IAAI,EAAC,aAD+B;AAEpCJ,EAAAA,YAFoC;AAGpCK,EAAAA,QAAQ,EAAC;AAELC,IAAAA,iBAAiB,EAAC,CAACC,KAAD,EAAOC,MAAP,KAAkB;AAGhCD,MAAAA,KAAK,CAACN,QAAN,CAAeQ,IAAf,CAAoBD,MAAM,CAACE,OAA3B;AAEH;AAPI,GAH2B;AAapCC,EAAAA,aAAa,EAAC;AACV,KAACb,gBAAgB,CAACc,OAAlB,GAA6B,CAACL,KAAD,EAAQC,MAAR,KAAiB;AAC1CD,MAAAA,KAAK,CAACL,MAAN,GAAe,SAAf;AACH,KAHS;AAIV,KAACJ,gBAAgB,CAACe,SAAlB,GAA8B,CAACN,KAAD,EAAOC,MAAP,KAAgB;AAE1C;AACAD,MAAAA,KAAK,CAACL,MAAN,GAAe,WAAf;AAEH,KATS;AAUV,KAACJ,gBAAgB,CAACgB,QAAlB,GAA4B,CAACP,KAAD,EAAOC,MAAP,KAAgB;AACxCD,MAAAA,KAAK,CAACL,MAAN,GAAe,OAAf;AACH,KAZS;AAcV,KAACH,eAAe,CAACa,OAAjB,GAA4B,CAACL,KAAD,EAAQC,MAAR,KAAiB;AACzCD,MAAAA,KAAK,CAACL,MAAN,GAAe,SAAf;AACH,KAhBS;AAkBV,KAACH,eAAe,CAACc,SAAjB,GAA6B,CAACN,KAAD,EAAOC,MAAP,KAAgB;AACzCD,MAAAA,KAAK,CAACL,MAAN,GAAe,WAAf;AAEAK,MAAAA,KAAK,CAACN,QAAN,GAAiBO,MAAM,CAACE,OAAP,CAAeT,QAAhC;AAEH,KAvBS;AAwBV,KAACF,eAAe,CAACe,QAAjB,GAA2B,CAACP,KAAD,EAAOC,MAAP,KAAgB;AACvCD,MAAAA,KAAK,CAACL,MAAN,GAAe,OAAf;AACH;AA1BS;AAbsB,CAAD,CAAhC;AA2CP,OAAO,MAAM;AAAEI,EAAAA;AAAF,IAAwBH,YAAY,CAACY,OAA3C;AAEP,eAAeZ,YAAY,CAACa,OAA5B","sourcesContent":["import { createSlice , createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { createNewComment ,getPostComments} from './PostCommentsApi';\r\n\r\n\r\nconst initialState = {\r\n\r\ncomments:[],\r\nstatus:'idle'\r\n\r\n}\r\n\r\n\r\nexport const commentSlice = createSlice({\r\n    name:'postComment',\r\n    initialState,\r\n    reducers:{\r\n\r\n        newCommentIsAdded:(state,action)=>  {\r\n            \r\n          \r\n            state.comments.push(action.payload)\r\n\r\n        }\r\n\r\n    },\r\n    extraReducers:{\r\n        [createNewComment.pending ] :(state ,action)=>{\r\n            state.status = 'loading'\r\n        },\r\n        [createNewComment.fulfilled]: (state,action)=>{\r\n            \r\n            // state.comments = action.payload.comments\r\n            state.status = 'fulfilled';\r\n\r\n        },\r\n        [createNewComment.rejected]:(state,action)=>{\r\n            state.status = 'error'\r\n        },\r\n\r\n        [getPostComments.pending ] :(state ,action)=>{\r\n            state.status = 'loading'\r\n        },\r\n        \r\n        [getPostComments.fulfilled]: (state,action)=>{\r\n            state.status = 'fulfilled';\r\n\r\n            state.comments = action.payload.comments;\r\n\r\n        },\r\n        [getPostComments.rejected]:(state,action)=>{\r\n            state.status = 'error'\r\n        },\r\n    }\r\n})\r\n\r\nexport const { newCommentIsAdded } = commentSlice.actions\r\n\r\nexport default commentSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}