{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { getUserBookmark, addBookmark, removeBookmark } from \"./userBookmarkApi\";\nconst initialState = {\n  userBookmark: [],\n  status: \"idle\",\n  error: null\n};\nconst userBookmarkSlice = createSlice({\n  name: \"userBookmark\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [getUserBookmark.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [getUserBookmark.fulfilled]: (state, action) => {\n      state.status = \"fulfilled\";\n      state.userBookmark = action.payload.posts;\n    },\n    [getUserBookmark.rejected]: (state, action) => {\n      state.status = \"error\";\n    },\n    [addBookmark.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [addBookmark.fulfilled]: (state, action) => {\n      state.status = \"fulfilled\"; // const findPostInUserBookmark = state.timelinePosts.findIndex(\n      //   (post) => post._id === action.payload.postID\n      // );\n      // const findPostInProfile = state.userPosts.findIndex(\n      //   (post) => post._id === action.payload.postID\n      // );\n      // if (findPostInTimeLine !== -1) {\n      //   state.timelinePosts[findPostInTimeLine].likeBy.pop(action.payload.userID);\n      //   state.timelinePosts[findPostInTimeLine].likesCount =\n      //   state.timelinePosts[findPostInTimeLine].likesCount - 1;\n      // }\n    },\n    [addBookmark.rejected]: (state, action) => {\n      state.status = \"error\";\n    },\n    [removeBookmark.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [removeBookmark.fulfilled]: (state, action) => {\n      state.status = \"fulfilled\";\n      const findRemovePostInUserBookmark = state.userBookmark.findIndex(post => post._id === action.payload.postID);\n\n      if (findRemovePostInUserBookmark !== -1) {\n        // state.userBookmark.splice(findRemovePostInUserBookmark,1)\n        state.userBookmark;\n      }\n    },\n    [removeBookmark.rejected]: (state, action) => {\n      state.status = \"error\";\n    }\n  }\n});\nexport default userBookmarkSlice.reducer;","map":{"version":3,"sources":["/Users/light/Documents/Mukul/Mukul Web Neog/mediaCode/media/my-app/src/features/User/userBookmarkSlice.js"],"names":["createSlice","getUserBookmark","addBookmark","removeBookmark","initialState","userBookmark","status","error","userBookmarkSlice","name","reducers","extraReducers","pending","state","action","fulfilled","payload","posts","rejected","findRemovePostInUserBookmark","findIndex","post","_id","postID","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,SACEC,eADF,EAEEC,WAFF,EAGEC,cAHF,QAIO,mBAJP;AAQA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,YAAY,EAAE,EADK;AAEnBC,EAAAA,MAAM,EAAE,MAFW;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;AAMA,MAAMC,iBAAiB,GAAGR,WAAW,CAAC;AACpCS,EAAAA,IAAI,EAAE,cAD8B;AAEpCL,EAAAA,YAFoC;AAIpCM,EAAAA,QAAQ,EAAE,EAJ0B;AAMpCC,EAAAA,aAAa,EAAE;AACb,KAACV,eAAe,CAACW,OAAjB,GAA2B,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC5CD,MAAAA,KAAK,CAACP,MAAN,GAAe,SAAf;AACD,KAHY;AAIb,KAACL,eAAe,CAACc,SAAjB,GAA6B,CAACF,KAAD,EAAQC,MAAR,KAAmB;AAC9CD,MAAAA,KAAK,CAACP,MAAN,GAAe,WAAf;AACAO,MAAAA,KAAK,CAACR,YAAN,GAAqBS,MAAM,CAACE,OAAP,CAAeC,KAApC;AACD,KAPY;AAQb,KAAChB,eAAe,CAACiB,QAAjB,GAA4B,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAC7CD,MAAAA,KAAK,CAACP,MAAN,GAAe,OAAf;AACD,KAVY;AAYb,KAACJ,WAAW,CAACU,OAAb,GAAuB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxCD,MAAAA,KAAK,CAACP,MAAN,GAAe,SAAf;AACD,KAdY;AAeb,KAACJ,WAAW,CAACa,SAAb,GAAyB,CAACF,KAAD,EAAQC,MAAR,KAAmB;AAE1CD,MAAAA,KAAK,CAACP,MAAN,GAAe,WAAf,CAF0C,CAI1C;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AAEA;AAID,KAtCY;AAuCb,KAACJ,WAAW,CAACgB,QAAb,GAAwB,CAACL,KAAD,EAAQC,MAAR,KAAmB;AACzCD,MAAAA,KAAK,CAACP,MAAN,GAAe,OAAf;AACD,KAzCY;AA2Cb,KAACH,cAAc,CAACS,OAAhB,GAA0B,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC3CD,MAAAA,KAAK,CAACP,MAAN,GAAe,SAAf;AACD,KA7CY;AA8Cb,KAACH,cAAc,CAACY,SAAhB,GAA4B,CAACF,KAAD,EAAQC,MAAR,KAAmB;AAC7CD,MAAAA,KAAK,CAACP,MAAN,GAAe,WAAf;AACA,YAAMa,4BAA4B,GAAGN,KAAK,CAACR,YAAN,CAAmBe,SAAnB,CACnCC,IAAI,IAAIA,IAAI,CAACC,GAAL,KAAaR,MAAM,CAACE,OAAP,CAAeO,MADD,CAArC;;AAGA,UAAGJ,4BAA4B,KAAK,CAAC,CAArC,EAAuC;AAEnC;AACAN,QAAAA,KAAK,CAACR,YAAN;AACH;AACF,KAxDY;AAyDb,KAACF,cAAc,CAACe,QAAhB,GAA2B,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAC5CD,MAAAA,KAAK,CAACP,MAAN,GAAe,OAAf;AACD;AA3DY;AANqB,CAAD,CAArC;AAqEA,eAAeE,iBAAiB,CAACgB,OAAjC","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nimport {\r\n  getUserBookmark,\r\n  addBookmark,\r\n  removeBookmark,\r\n} from \"./userBookmarkApi\";\r\n\r\n\r\n\r\nconst initialState = {\r\n  userBookmark: [],\r\n  status: \"idle\",\r\n  error: null,\r\n};\r\n\r\nconst userBookmarkSlice = createSlice({\r\n  name: \"userBookmark\",\r\n  initialState,\r\n\r\n  reducers: {},\r\n\r\n  extraReducers: {\r\n    [getUserBookmark.pending]: (state, action) => {\r\n      state.status = \"loading\";\r\n    },\r\n    [getUserBookmark.fulfilled]: (state, action) => {\r\n      state.status = \"fulfilled\";\r\n      state.userBookmark = action.payload.posts\r\n    },\r\n    [getUserBookmark.rejected]: (state, action) => {\r\n      state.status = \"error\";\r\n    },\r\n\r\n    [addBookmark.pending]: (state, action) => {\r\n      state.status = \"loading\";\r\n    },\r\n    [addBookmark.fulfilled]: (state, action) => {\r\n\r\n      state.status = \"fulfilled\";\r\n\r\n      // const findPostInUserBookmark = state.timelinePosts.findIndex(\r\n      //   (post) => post._id === action.payload.postID\r\n      // );\r\n      // const findPostInProfile = state.userPosts.findIndex(\r\n      //   (post) => post._id === action.payload.postID\r\n      // );\r\n\r\n\r\n      // if (findPostInTimeLine !== -1) {\r\n        \r\n      //   state.timelinePosts[findPostInTimeLine].likeBy.pop(action.payload.userID);\r\n\r\n      //   state.timelinePosts[findPostInTimeLine].likesCount =\r\n      //   state.timelinePosts[findPostInTimeLine].likesCount - 1;\r\n\r\n      // }\r\n\r\n\r\n\r\n    },\r\n    [addBookmark.rejected]: (state, action) => {\r\n      state.status = \"error\";\r\n    },\r\n\r\n    [removeBookmark.pending]: (state, action) => {\r\n      state.status = \"loading\";\r\n    },\r\n    [removeBookmark.fulfilled]: (state, action) => {\r\n      state.status = \"fulfilled\";\r\n      const findRemovePostInUserBookmark = state.userBookmark.findIndex(\r\n        post => post._id === action.payload.postID\r\n      ) \r\n      if(findRemovePostInUserBookmark !== -1){\r\n\r\n          // state.userBookmark.splice(findRemovePostInUserBookmark,1)\r\n          state.userBookmark\r\n      }\r\n    },\r\n    [removeBookmark.rejected]: (state, action) => {\r\n      state.status = \"error\";\r\n    },\r\n  },\r\n});\r\n\r\nexport default userBookmarkSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}