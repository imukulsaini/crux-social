{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { getUserPosts, getTimelinePosts, getPostByID } from \"./PostAPI\";\nimport { likePost, unLikePost } from \"../User/userLikesApi\";\nimport { addBookmark, removeBookmark } from \"../User/userBookmarkApi\";\nconst initialState = {\n  timelinePosts: [],\n  userPosts: [],\n  postsID: [],\n  postIDStatus: 'idle'\n};\nexport const postsSlice = createSlice({\n  name: \"posts\",\n  initialState,\n  reducers: {// postIsClicked:(state,action)=>  {\n    //   const findPost = state.timelinePosts.find(post=>post._id === action.payload.postID);\n    //     state.postsID = findPost\n    // }\n  },\n  extraReducers: builder => {\n    builder.addCase(likePost.fulfilled, (state, action) => {\n      const findPostInTimeLine = state.timelinePosts.findIndex(post => post._id === action.payload.postID);\n      const findPostInProfile = state.userPosts.findIndex(post => post._id === action.payload.postID);\n\n      if (findPostInTimeLine !== -1) {\n        state.timelinePosts[findPostInTimeLine].likeBy.push(action.payload.userID);\n        state.timelinePosts[findPostInTimeLine].likesCount = state.timelinePosts[findPostInTimeLine].likesCount + 1;\n      }\n\n      if (findPostInProfile !== -1) {\n        state.userPosts[findPostInProfile].likeBy.push(action.payload.userID);\n        state.userPosts[findPostInProfile].likesCount = state.userPosts[findPostInProfile].likesCount + 1;\n      }\n\n      if (state.postsID.likeBy) {\n        state.postsID.likeBy.push(action.payload.userID);\n        state.postsID.likesCount = state.postsID.likesCount + 1;\n      }\n    });\n    builder.addCase(unLikePost.fulfilled, (state, action) => {\n      const findPostInTimeLine = state.timelinePosts.findIndex(post => post._id === action.payload.postID);\n      const findPostInProfile = state.userPosts.findIndex(post => post._id === action.payload.postID);\n\n      if (findPostInTimeLine !== -1) {\n        state.timelinePosts[findPostInTimeLine].likeBy.pop(action.payload.userID);\n        state.timelinePosts[findPostInTimeLine].likesCount = state.timelinePosts[findPostInTimeLine].likesCount - 1;\n      }\n\n      if (findPostInProfile !== -1) {\n        state.userPosts[findPostInProfile].likeBy.pop(action.payload.userID);\n        state.userPosts[findPostInProfile].likesCount = state.userPosts[findPostInProfile].likesCount - 1;\n      }\n\n      if (state.postsID.likeBy) {\n        state.postsID.likeBy.pop(action.payload.userID);\n        state.postsID.likesCount = state.postsID.likesCount - 1;\n      }\n    });\n    builder.addCase(addBookmark.fulfilled, (state, action) => {\n      const findPostInTimeLine = state.timelinePosts.findIndex(post => post._id === action.payload.postID);\n      const findPostInProfile = state.userPosts.findIndex(post => post._id === action.payload.postID);\n\n      if (findPostInTimeLine !== -1 && state.timelinePosts) {\n        state.timelinePosts[findPostInTimeLine].bookmarkBy.push(action.payload.userID);\n      }\n\n      if (findPostInProfile !== -1 && state.userPosts) {\n        state.userPosts[findPostInProfile].bookmarkBy.push(action.payload.userID);\n      }\n\n      if (state.postsID.bookmarkBy) {\n        state.postsID.bookmarkBy.push(action.payload.userID);\n      }\n    });\n    builder.addCase(removeBookmark.fulfilled, (state, action) => {\n      const findPostInTimeLine = state.timelinePosts.findIndex(post => post._id === action.payload.postID);\n      const findPostInProfile = state.userPosts.findIndex(post => post._id === action.payload.postID);\n\n      if (findPostInTimeLine !== -1 && state.timelinePosts) {\n        state.timelinePosts[findPostInTimeLine].bookmarkBy.pop(action.payload.userID);\n      }\n\n      if (findPostInProfile !== -1 && state.userPosts) {\n        state.userPosts[findPostInProfile].bookmarkBy.pop(action.payload.userID);\n      }\n\n      if (state.postsID.bookmarkBy) {\n        state.postsID.bookmarkBy.pop(action.payload.userID);\n      }\n    });\n    builder.addCase(getUserPosts.pending, (state, action) => {\n      state.status = \"loading\";\n    });\n    builder.addCase(getUserPosts.fulfilled, (state, action) => {\n      state.userPosts = action.payload;\n      state.status = \"fulfilled\";\n    });\n    builder.addCase(getUserPosts.rejected, (state, action) => {\n      state.status = \"error\";\n    });\n    builder.addCase(getTimelinePosts.pending, (state, action) => {\n      state.status = \"loading\";\n    });\n    builder.addCase(getTimelinePosts.fulfilled, (state, action) => {\n      state.timelinePosts = action.payload.posts;\n      state.status = \"fulfilled\";\n    });\n    builder.addCase(getTimelinePosts.rejected, (state, action) => {\n      state.status = \"error\";\n    });\n    builder.addCase(getPostByID.pending, (state, action) => {\n      state.status = \"loading\";\n    });\n    builder.addCase(getPostByID.fulfilled, (state, action) => {\n      state.postsID = action.payload;\n      state.status = \"fulfilled\";\n    });\n    builder.addCase(getPostByID.rejected, (state, action) => {\n      state.status = \"error\";\n    });\n  }\n});\nexport const {\n  postIsClicked\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"sources":["/Users/light/Documents/Mukul/Mukul Web Neog/mediaCode/media/my-app/src/features/post/PostSlice.js"],"names":["createSlice","getUserPosts","getTimelinePosts","getPostByID","likePost","unLikePost","addBookmark","removeBookmark","initialState","timelinePosts","userPosts","postsID","postIDStatus","postsSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","findPostInTimeLine","findIndex","post","_id","payload","postID","findPostInProfile","likeBy","push","userID","likesCount","pop","bookmarkBy","pending","status","rejected","posts","postIsClicked","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice,  } from \"@reduxjs/toolkit\";\r\nimport {\r\n  \r\n  getUserPosts,\r\n  getTimelinePosts,\r\n  getPostByID,\r\n} from \"./PostAPI\";\r\nimport { likePost, unLikePost } from \"../User/userLikesApi\";\r\nimport { addBookmark, removeBookmark } from \"../User/userBookmarkApi\";\r\n\r\nconst initialState = {\r\n  timelinePosts: [],\r\n  userPosts: [],\r\n  postsID: [],\r\n  postIDStatus:'idle',\r\n  \r\n};\r\n\r\nexport const postsSlice = createSlice({\r\n  name: \"posts\",\r\n  initialState,\r\n  reducers: {\r\n\r\n    // postIsClicked:(state,action)=>  {\r\n    //   const findPost = state.timelinePosts.find(post=>post._id === action.payload.postID);\r\n    //     state.postsID = findPost\r\n    // }\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(likePost.fulfilled, (state, action) => {\r\n\r\n      const findPostInTimeLine = state.timelinePosts.findIndex(\r\n        (post) => post._id === action.payload.postID\r\n      );\r\n      const findPostInProfile = state.userPosts.findIndex(\r\n        (post) => post._id === action.payload.postID\r\n      );\r\n\r\n      if (findPostInTimeLine !== -1) {\r\n        state.timelinePosts[findPostInTimeLine].likeBy.push(\r\n          action.payload.userID\r\n        );\r\n        state.timelinePosts[findPostInTimeLine].likesCount =\r\n          state.timelinePosts[findPostInTimeLine].likesCount + 1;\r\n      }\r\n      if (findPostInProfile !== -1) {\r\n        state.userPosts[findPostInProfile].likeBy.push(action.payload.userID);\r\n        state.userPosts[findPostInProfile].likesCount =\r\n          state.userPosts[findPostInProfile].likesCount + 1;\r\n      }\r\n      if (state.postsID.likeBy) {\r\n        state.postsID.likeBy.push(action.payload.userID);\r\n        state.postsID.likesCount = state.postsID.likesCount + 1;\r\n      }\r\n    });\r\n\r\n    builder.addCase(unLikePost.fulfilled, (state, action) => {\r\n\r\n\r\n      const findPostInTimeLine = state.timelinePosts.findIndex(\r\n        (post) => post._id === action.payload.postID\r\n      );\r\n      const findPostInProfile = state.userPosts.findIndex(\r\n        (post) => post._id === action.payload.postID\r\n      );\r\n\r\n\r\n      if (findPostInTimeLine !== -1) {\r\n        \r\n        state.timelinePosts[findPostInTimeLine].likeBy.pop(action.payload.userID);\r\n\r\n        state.timelinePosts[findPostInTimeLine].likesCount =\r\n        state.timelinePosts[findPostInTimeLine].likesCount - 1;\r\n\r\n      }\r\n      if (findPostInProfile !== -1) {\r\n        state.userPosts[findPostInProfile].likeBy.pop(action.payload.userID);\r\n        state.userPosts[findPostInProfile].likesCount =\r\n          state.userPosts[findPostInProfile].likesCount - 1;\r\n      }\r\n\r\n      if (state.postsID.likeBy) {\r\n        state.postsID.likeBy.pop(action.payload.userID);\r\n        state.postsID.likesCount = state.postsID.likesCount - 1;\r\n      }\r\n    });\r\n\r\n\r\n    builder.addCase(addBookmark.fulfilled, (state, action) => {\r\n\r\n      const findPostInTimeLine = state.timelinePosts.findIndex(\r\n        (post) => post._id === action.payload.postID\r\n      );\r\n      const findPostInProfile = state.userPosts.findIndex(\r\n        (post) => post._id === action.payload.postID\r\n      );\r\n      \r\n      if (findPostInTimeLine !== -1 && state.timelinePosts) {\r\n        state.timelinePosts[findPostInTimeLine].bookmarkBy.push(\r\n          action.payload.userID\r\n        );\r\n      }\r\n      if (findPostInProfile !== -1 && state.userPosts) {\r\n        state.userPosts[findPostInProfile].bookmarkBy.push(\r\n          action.payload.userID\r\n        );\r\n      }\r\n      if (state.postsID.bookmarkBy) {\r\n        state.postsID.bookmarkBy.push(action.payload.userID);\r\n      }\r\n    });\r\n\r\n    builder.addCase(removeBookmark.fulfilled, (state, action) => {\r\n        const findPostInTimeLine = state.timelinePosts.findIndex(\r\n            (post) => post._id === action.payload.postID\r\n          );\r\n          const findPostInProfile = state.userPosts.findIndex(\r\n            (post) => post._id === action.payload.postID\r\n          );\r\n\r\n\r\n    if (findPostInTimeLine !== -1 && state.timelinePosts) {\r\n        state.timelinePosts[findPostInTimeLine].bookmarkBy.pop(\r\n          action.payload.userID\r\n        );\r\n      }\r\n      if (findPostInProfile !== -1 && state.userPosts) {\r\n        state.userPosts[findPostInProfile].bookmarkBy.pop(\r\n          action.payload.userID\r\n        );\r\n      }\r\n      if (state.postsID.bookmarkBy) {\r\n         state.postsID.bookmarkBy.pop(action.payload.userID);\r\n      }\r\n    });\r\n\r\n    builder.addCase(getUserPosts.pending, (state, action) => {\r\n      state.status = \"loading\";\r\n    });\r\n\r\n    builder.addCase(getUserPosts.fulfilled, (state, action) => {\r\n      state.userPosts = action.payload;\r\n      state.status = \"fulfilled\";\r\n    });\r\n    builder.addCase(getUserPosts.rejected, (state, action) => {\r\n      state.status = \"error\";\r\n    });\r\n\r\n    builder.addCase(getTimelinePosts.pending, (state, action) => {\r\n      state.status = \"loading\";\r\n    });\r\n    builder.addCase(getTimelinePosts.fulfilled, (state, action) => {\r\n      state.timelinePosts = action.payload.posts;\r\n      state.status = \"fulfilled\";\r\n    });\r\n    builder.addCase(getTimelinePosts.rejected, (state, action) => {\r\n      state.status = \"error\";\r\n    });\r\n\r\n    builder.addCase(getPostByID.pending, (state, action) => {\r\n      state.status = \"loading\";\r\n    });\r\n    builder.addCase(getPostByID.fulfilled, (state, action) => {\r\n      state.postsID = action.payload;\r\n      state.status = \"fulfilled\";\r\n    });\r\n    builder.addCase(getPostByID.rejected, (state, action) => {\r\n      state.status = \"error\";\r\n    });\r\n  },\r\n});\r\n\r\nexport const { postIsClicked } = postsSlice.actions;\r\n\r\nexport default postsSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}